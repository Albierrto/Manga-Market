const axios = require('axios');
require('dotenv').config();

// eBay API configuration
const EBAY_CLIENT_ID = process.env.EBAY_CLIENT_ID || 'Your-Client-ID';
const EBAY_CLIENT_SECRET = process.env.EBAY_CLIENT_SECRET || 'Your-Client-Secret';
const USE_MOCK_DATA = process.env.USE_MOCK_DATA === 'true';

// Production API URLs only
const FINDING_API_URL = 'https://svcs.ebay.com/services/search/FindingService/v1';
const AUTH_URL = 'https://api.ebay.com/identity/v1/oauth2/token';

// Throttling and caching settings
const THROTTLE_DELAY = 10000; // 10 seconds between API calls - increased to avoid rate limiting
const apiCache = {};
const CACHE_TTL = 24 * 60 * 60 * 1000; // Cache for 24 hours (in milliseconds)

// Token caching
let accessToken = null;
let tokenExpiry = null;

// Rate limit tracking 
let lastApiCallTime = 0;
let apiCallCount = 0;
const MAX_CALLS_PER_HOUR = 5; // Conservative limit to prevent rate limiting
const HOUR_IN_MS = 60 * 60 * 1000;

/**
 * Helper function to delay execution
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * Helper function to check rate limits
 */
async function checkRateLimit() {
  const now = Date.now();
  
  // Reset counter if an hour has passed
  if (now - lastApiCallTime > HOUR_IN_MS) {
    apiCallCount = 0;
    lastApiCallTime = now;
    return true;
  }
  
  // Check if we've reached the rate limit
  if (apiCallCount >= MAX_CALLS_PER_HOUR) {
    console.log('Rate limit reached, using cached or mock data');
    return false;
  }
  
  // Increment the counter
  apiCallCount++;
  lastApiCallTime = now;
  
  // Add delay to prevent rate limiting
  await delay(THROTTLE_DELAY);
  return true;
}

/**
 * Get and reuse eBay access token.
 */
async function getEbayAccessToken() {
  if (accessToken && tokenExpiry && tokenExpiry > Date.now()) {
    console.log('Reusing cached eBay access token...');
    return accessToken;
  }
  
  try {
    console.log('Requesting new eBay access token...');
    const response = await axios.post(
      AUTH_URL,
      'grant_type=client_credentials&scope=https://api.ebay.com/oauth/api_scope',
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          Authorization: `Basic ${Buffer.from(`${EBAY_CLIENT_ID}:${EBAY_CLIENT_SECRET}`).toString('base64')}`
        }
      }
    );
    
    accessToken = response.data.access_token;
    tokenExpiry = Date.now() + (response.data.expires_in * 1000) - (5 * 60 * 1000); // Subtract 5 mins for safety
    return accessToken;
  } catch (error) {
    console.error('Error fetching eBay access token:', error.response?.data || error.message);
    throw new Error('Failed to fetch eBay access token');
  }
}

/**
 * Calculate price metrics from sold listings data
 */
function calculateMangaPrices(items, totalVolumes) {
  if (!items || items.length === 0) {
    return {
      averageSetPrice: 0,
      pricePerVolume: 0,
      priceTrend: 0,
      numberOfListings: 0,
      recentSales: []
    };
  }
  
  // Extract prices
  const prices = items.map(item => {
    return parseFloat(item.sellingStatus?.[0]?.convertedCurrentPrice?.[0]?.__value__ || 0);
  }).filter(price => !isNaN(price) && price > 0);
  
  if (prices.length === 0) {
    return {
      averageSetPrice: 0,
      pricePerVolume: 0,
      priceTrend: 0,
      numberOfListings: 0,
      recentSales: []
    };
  }
  
  // Calculate price statistics
  const sum = prices.reduce((total, price) => total + price, 0);
  const averageSetPrice = sum / prices.length;
  const pricePerVolume = averageSetPrice / totalVolumes;
  
  // Get recent sales data for display
  const recentSales = items.slice(0, 5).map(item => ({
    title: item.title?.[0] || 'Unknown title',
    price: parseFloat(item.sellingStatus?.[0]?.convertedCurrentPrice?.[0]?.__value__ || 0),
    endTime: item.listingInfo?.[0]?.endTime?.[0] || new Date().toISOString(),
    url: item.viewItemURL?.[0] || ''
  }));

  // Calculate price trend (mock for now - would need historical data)
  const priceTrend = Math.random() * 20 - 10; // -10% to +10% for demo
  
  return {
    averageSetPrice,
    pricePerVolume,
    priceTrend,
    numberOfListings: items.length,
    recentSales
  };
}

/**
 * Search for completed manga set listings on eBay.
 * @param {string} series - Manga series name.
 * @param {string} volumes - Volume range (e.g., "1-10").
 * @return {Object} - Object with success status, message, and data.
 */
async function searchCompletedMangaSets(series, volumes) {
  try {
    // Create cache key from search params
    const cacheKey = `${series}_${volumes}`;
    
    // Check if we have cached results that aren't expired
    if (apiCache[cacheKey] && apiCache[cacheKey].timestamp > Date.now() - CACHE_TTL) {
      console.log('Using cached eBay search results');
      return apiCache[cacheKey].data;
    }
    
    // Parse volume range
    let volumeStart, volumeEnd;
    if (volumes && volumes.includes('-')) {
      [volumeStart, volumeEnd] = volumes.split('-').map(v => parseInt(v, 10));
    } else if (volumes) {
      volumeStart = parseInt(volumes, 10);
      volumeEnd = volumeStart;
    }
    
    // Build search query
    const searchQuery = buildSearchQuery(series, volumeStart, volumeEnd);
    console.log(`Searching eBay for: ${searchQuery}`);
    
    // Check rate limit first
    const canMakeRequest = await checkRateLimit();
    if (!canMakeRequest) {
      console.log("Rate limit would be exceeded, using mock data instead");
      const mockResult = getMockSearchResults(series, volumes);
      apiCache[cacheKey] = {
        timestamp: Date.now(),
        data: mockResult
      };
      return mockResult;
    }
    
    try {
      const response = await axios.get(FINDING_API_URL, {
        params: {
          'OPERATION-NAME': 'findCompletedItems',
          'SERVICE-VERSION': '1.13.0',
          'SECURITY-APPNAME': EBAY_CLIENT_ID,
          'RESPONSE-DATA-FORMAT': 'JSON',
          'REST-PAYLOAD': true,
          keywords: searchQuery,
          categoryId: '261186', // Adjust category if needed
          'itemFilter(0).name': 'SoldItemsOnly',
          'itemFilter(0).value': 'true',
          sortOrder: 'EndTimeSoonest',
          'paginationInput.entriesPerPage': '10' // Reduced from 20 to further help with rate limits
        },
        headers: {
          'X-EBAY-SOA-SERVICE-NAME': 'FindingService',
          'X-EBAY-SOA-OPERATION-NAME': 'findCompletedItems',
          'X-EBAY-SOA-SERVICE-VERSION': '1.13.0',
          'X-EBAY-SOA-GLOBAL-ID': 'EBAY-US',
          'X-EBAY-SOA-SECURITY-APPNAME': EBAY_CLIENT_ID,
          'X-EBAY-SOA-REQUEST-DATA-FORMAT': 'JSON'
        },
        timeout: 15000 // Increased timeout to 15 seconds
      });

      if (
        !response.data ||
        !response.data.findCompletedItemsResponse ||
        !response.data.findCompletedItemsResponse[0].searchResult ||
        !response.data.findCompletedItemsResponse[0].searchResult[0].item
      ) {
        console.log('No items found in eBay response');
        if (USE_MOCK_DATA) {
          console.log('Using mock data since real API returned no results');
          const mockResult = getMockSearchResults(series, volumes);
          // Still cache the mock result
          apiCache[cacheKey] = {
            timestamp: Date.now(),
            data: mockResult
          };
          return mockResult;
        }
        return { success: false, message: 'No sold listings found for this manga series', data: [] };
      }

      // Process items from response
      const items = response.data.findCompletedItemsResponse[0].searchResult[0].item;
      const relevantItems = filterRelevantItems(items, series, volumeStart, volumeEnd);
      
      if (relevantItems.length === 0) {
        if (USE_MOCK_DATA) {
          console.log('Using mock data since no relevant items were found');
          const mockResult = getMockSearchResults(series, volumes);
          // Cache the mock result
          apiCache[cacheKey] = {
            timestamp: Date.now(),
            data: mockResult
          };
          return mockResult;
        }
        return { success: false, message: 'No relevant sold listings found for this manga series', data: [] };
      }
      
      const result = { 
        success: true, 
        message: `Found ${relevantItems.length} sold listings`, 
        data: relevantItems 
      };
      
      // Cache the successful result
      apiCache[cacheKey] = {
        timestamp: Date.now(),
        data: result
      };
      
      return result;
    } catch (apiError) {
      console.error('eBay API error:', apiError.response?.data || apiError.message);
      console.error('Status code:', apiError.response?.status);
      console.error('Full error details:', JSON.stringify(apiError.response?.data, null, 2));
      
      // Check if it's a rate limit error
      const isRateLimit = 
        apiError.response?.status === 500 && 
        apiError.response?.data?.errorMessage?.[0]?.error?.[0]?.errorId?.[0] === "10001";
      
      if (isRateLimit) {
        console.log("Rate limit exceeded! Using mock data for 24 hours...");
        // Reset the rate limit counter and wait longer
        apiCallCount = MAX_CALLS_PER_HOUR;
      }
      
      if (USE_MOCK_DATA) {
        console.log('Falling back to mock data due to eBay API error');
        const mockResult = getMockSearchResults(series, volumes);
        // Cache the mock result even on error
        apiCache[cacheKey] = {
          timestamp: Date.now(),
          data: mockResult
        };
        return mockResult;
      }
      throw apiError;
    }
  } catch (error) {
    console.error('Search error:', error);
    if (USE_MOCK_DATA) {
      console.log('Falling back to mock data due to error');
      return getMockSearchResults(series, volumes);
    }
    return { success: false, message: 'Error fetching data from eBay API', error: error.message };
  }
}

/**
 * Fetch manga prices from eBay sold listings
 */
async function fetchEbayPrices(series, volumeStart, volumeEnd, condition) {
  try {
    // Handle different parameter formats
    let volumes;
    let totalVols;
    
    // Check if first parameter is a volume range string
    if (typeof volumeStart === 'string' && volumeStart.includes('-')) {
      volumes = volumeStart;
      const [start, end] = volumes.split('-').map(v => parseInt(v));
      volumeStart = start;
      volumeEnd = end;
      totalVols = volumeEnd - volumeStart + 1;
    } else if (typeof volumeStart === 'number' && typeof volumeEnd === 'number') {
      volumes = `${volumeStart}-${volumeEnd}`;
      totalVols = volumeEnd - volumeStart + 1;
    } else {
      // Handle single volume
      volumes = volumeStart.toString();
      volumeEnd = volumeStart;
      totalVols = 1;
    }
    
    // Call search function
    const searchResults = await searchCompletedMangaSets(series, volumes);
    
    if (!searchResults.success) {
      console.log('No successful search results, using mock price data');
      return getMockPriceData(series, totalVols);
    }
    
    // Calculate price metrics
    const priceData = calculateMangaPrices(searchResults.data, totalVols);
    
    if (!priceData || priceData.averageSetPrice === 0) {
      console.log('No valid price data calculated, using mock price data');
      return getMockPriceData(series, totalVols);
    }
    
    return {
      averagePrice: priceData.averageSetPrice,
      priceTrend: priceData.priceTrend,
      numberOfListings: priceData.numberOfListings,
      recentSales: priceData.recentSales
    };
  } catch (error) {
    console.error('Error in fetchEbayPrices:', error);
    return getMockPriceData(series, volumeEnd - volumeStart + 1);
  }
}

/**
 * Build search query for eBay API.
 */
function buildSearchQuery(series, volumeStart, volumeEnd) {
  let query = `${series} manga`;
  if (volumeStart && volumeEnd) {
    if (volumeStart === volumeEnd) {
      query += ` volume ${volumeStart}`;
    } else {
      query += ` volumes ${volumeStart}-${volumeEnd} complete set`;
    }
  }
  return query;
}

/**
 * Filter results to only include relevant manga listings.
 */
function filterRelevantItems(items, series, volumeStart, volumeEnd) {
  const seriesLower = series.toLowerCase();
  return items.filter(item => {
    const title = item.title?.[0]?.toLowerCase() || '';
    if (!title.includes(seriesLower)) return false;
    if (!title.includes('manga') && !title.includes('volume') && !title.includes('vol')) return false;
    if (title.includes('poster') || title.includes('figure') || title.includes('toy')) return false;
    return true;
  });
}

/**
 * Create mock search results for testing.
 */
function getMockSearchResults(series, volumes) {
  let volumeStart, volumeEnd;
  if (volumes && volumes.includes('-')) {
    [volumeStart, volumeEnd] = volumes.split('-').map(v => parseInt(v, 10));
  } else if (volumes) {
    volumeStart = parseInt(volumes, 10);
    volumeEnd = volumeStart;
  } else {
    volumeStart = 1;
    volumeEnd = 10;
  }
  const totalVolumes = volumeEnd - volumeStart + 1;
  const isComplete = totalVolumes > 5;
  const count = Math.floor(Math.random() * 3) + 3;
  const items = [];
  for (let i = 0; i < count; i++) {
    const basePrice = 10; // $10 per volume on average
    const priceVariation = Math.random() * 4 - 2; // +/- $2 variation
    const totalPrice = (basePrice + priceVariation) * totalVolumes;
    const now = new Date();
    const endDate = new Date(now.setDate(now.getDate() - (i * 3)));
    items.push({
      itemId: [String(10000000 + Math.floor(Math.random() * 1000000))],
      title: [`${series} Manga ${isComplete ? 'Complete' : ''} Set Volumes ${volumeStart}-${volumeEnd}`],
      viewItemURL: [`https://www.ebay.com/itm/${10000000 + Math.floor(Math.random() * 1000000)}`],
      sellingStatus: [{
        convertedCurrentPrice: [{
          __value__: String(totalPrice.toFixed(2)),
          _currencyId: "USD"
        }],
        sellingState: ["EndedWithSales"]
      }],
      listingInfo: [{
        endTime: [endDate.toISOString()],
        listingType: ["FixedPrice"]
      }]
    });
  }
  return { success: true, message: `Found ${count} mock listings for testing`, data: items };
}

/**
 * Generate mock price data for testing
 */
function getMockPriceData(series, totalVolumes) {
  // Calculate realistic mock prices
  const basePrice = 10; // $10 per volume average
  const totalPrice = basePrice * totalVolumes;
  
  // Add some variation
  const priceVariation = Math.random() * 0.3 - 0.15; // +/- 15%
  const adjustedPrice = totalPrice * (1 + priceVariation);
  
  // Generate 2-4 mock recent sales
  const salesCount = Math.floor(Math.random() * 3) + 2;
  const recentSales = [];
  
  for (let i = 0; i < salesCount; i++) {
    const price = adjustedPrice * (0.9 + Math.random() * 0.2); // +/- 10% from adjusted price
    const now = new Date();
    const saleDate = new Date(now.setDate(now.getDate() - (i * 5))); // Past sales
    
    recentSales.push({
      title: `${series} Manga Set (${totalVolumes} volumes) - ${i % 2 === 0 ? 'Like New' : 'Good'} Condition`,
      price: parseFloat(price.toFixed(2)),
      endTime: saleDate.toISOString(),
      url: `#mock-listing-${i}`
    });
  }
  
  return {
    averagePrice: parseFloat(adjustedPrice.toFixed(2)),
    priceTrend: parseFloat((Math.random() * 10 - 5).toFixed(1)), // -5% to +5%
    numberOfListings: salesCount,
    recentSales
  };
}

// Export the functions for use in other modules
module.exports = {
  searchCompletedMangaSets,
  getEbayAccessToken,
  fetchEbayPrices,
  calculateMangaPrices
};